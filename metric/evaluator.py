import torch
import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
from fst import aggregated_fst
from allele_freq import plot_allele_freq
from geno_freq import plot_geno_freq
from precision_recall import get_precision_recall
import pca

# Dictionary mapping metric names to their functions
available_metrics = [
    "precision_recall",
    "fixation_index",
    "pca",
    "allele_freq",
    "geno_freq"
    ]

def train_evaluator(real, fake, metrics, label1, label2, save_path_img, k=60):
    """
    Evaluate the performance of a generative model using custom metrics.

    Args:
        real (pd.DataFrame): The real dataset for comparison.
        fake (pd.DataFrame): The synthetic data generated by the model.
        metrics (dict): A dictionary of metric functions, where the key is the metric name,
                        and the value is the function that computes the metric.
        label1 (str): Label for real
        label2 (str): Label for fake 
        save_path_img (str): File path to save the generated images
        k (int): K nearest neighbour used to estimate the support

    Returns:
        dict: A dictionary of computed metric values and we will also save the visualization images in the corresponding path.
    """
    # Dictionary to store metric results
    results = {}

    for metric_name in metrics:
        if metric_name in available_metrics:
            if metric_name == "pca":
                # pca.geno_PCA(real, fake, label1, label2, save_path_img+"pca.png")
                pca.geno_PCA(real, fake, label1, label2, save_path_img+"pca")
            elif metric_name == "fixation_index":
                results[metric_name] = aggregated_fst(real, fake)
            elif metric_name == "allele_freq":
                # plot_allele_freq(real, fake, label1, label2, save_path_img+"allele_freq.png")
                plot_allele_freq(real, fake, label1, label2, save_path_img+"allele_freq")
            elif metric_name == "geno_freq":
                # plot_geno_freq(real, fake, label1, label2, save_path_img+"geno_freq.png")
                plot_geno_freq(real, fake, label1, label2, save_path_img+"geno_freq")
            elif metric_name == "precision_recall":
                precision, recall = get_precision_recall(torch.tensor(real.to_numpy()).to(dtype=torch.float32), torch.tensor(fake.to_numpy()).to(dtype=torch.float32), ks=[k], distance = "euclidean")
                results["precision"] = precision[0]
                results["recall"] = recall[0]
        else:
            print(f"Warning: Metric '{metric_name}' is not available.")

    return results